package commands

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"

	"github.com/open-policy-agent/opa/ast"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// NewDocCommand creates a new doc command
func NewDocCommand() *cobra.Command {
	cmd := cobra.Command{
		Use:   "doc <dir>",
		Short: "Generate documentation from Rego policies",
		Args:  cobra.ExactArgs(1),

		RunE: func(cmd *cobra.Command, args []string) error {
			if err := viper.BindPFlag("output", cmd.Flags().Lookup("output")); err != nil {
				return fmt.Errorf("bind output flag: %w", err)
			}

			return runDocCommand(args[0])
		},
	}

	cmd.Flags().StringP("output", "o", "", "output directory for the policy documentation")

	return &cmd
}

type PolicyDocumentEntry struct {
	Kinds       string
	Description string
}

func runDocCommand(path string) error {
	policyDocumentation, err := getPolicyDocumentation(path)
	if err != nil {
		return fmt.Errorf("get policy documentation: %w", err)
	}

	err = ioutil.WriteFile(filepath.Join(path, "policies.md"), []byte(policyDocumentation), os.ModePerm)
	if err != nil {
		return fmt.Errorf("writing constraint: %w", err)
	}

	return nil
}

func getPolicyDocumentation(path string) (string, error) {
	regoFilePaths, err := getRegoFilePaths(path)
	if err != nil {
		return "", fmt.Errorf("get rego files: %w", err)
	}

	modules := map[string]*ast.Module{}
	for _, regoFilePath := range regoFilePaths {
		regoFileBytes, err := ioutil.ReadFile(regoFilePath)
		if err != nil {
			return "", fmt.Errorf("read rego file: %w", err)
		}

		parsedModule, err := ast.ParseModule(regoFilePath, string(regoFileBytes[:]))
		if err != nil {
			return "", fmt.Errorf("parse module: %w", err)
		}

		modules[regoFilePath] = parsedModule
	}

	var policyDocumentEntries []PolicyDocumentEntry
	for _, module := range modules {
		var description string
		for _, comment := range module.Comments {
			if strings.Contains(string(comment.Text), "@Kinds") {
				kinds := strings.Split(string(comment.Text), " ")
				kinds = kinds[2:]

				policyDocumentEntry := PolicyDocumentEntry{
					Kinds:       strings.Join(kinds, ","),
					Description: description,
				}

				policyDocumentEntries = append(policyDocumentEntries, policyDocumentEntry)
			} else {
				description = string(comment.Text)
			}
		}
	}

	policyDocument := "<-- GENERATED BY KONSTRAINT. DO NOT EDIT -->\n\n"
	policyDocument += "# Policies\n\n"
	policyDocument += "|Kinds|Description|\n"
	policyDocument += "|---|---|\n"

	for _, policyDocumentEntry := range policyDocumentEntries {
		policyDocument += fmt.Sprintf("|%s|%s|\n", policyDocumentEntry.Kinds, policyDocumentEntry.Description)
	}

	return policyDocument, nil
}
